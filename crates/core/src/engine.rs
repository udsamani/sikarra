use std::pin::Pin;

use futures::Stream;

use crate::error::AppResult;

/// A core processing trait that handles events and produces actions which can
/// be executed by the application.
#[async_trait::async_trait]
pub trait Engine<Event, Action>: Send + Sync {
    /// Get the unique identifier for the engine
    fn id(&self) -> &str;

    /// Engine proccesses an event according to the logic defined in the engine.
    /// It returns a vector of actions, which would ideally be executed by
    /// the application.
    async fn process_event(&mut self, event: Event) -> AppResult<Vec<Action>>;
}

/// A specialzed stream type for event collectors in the application.
pub type CollectorStream<'a, Event> = Pin<Box<dyn Stream<Item = Event> + Send + 'a>>;

/// A trait for components that collect and stream events in the application.
///
/// The [`Collector`] trait defines pthe interface for any component capable of
/// collecting events of specific type and providing them as an asychronous
/// stream. Implementors of this trait act as event sources that other system
/// components can subscribe to.
#[async_trait::async_trait]
pub trait Collector<Event>: Send + Sync {
    /// Get the unique identifier for the collector
    fn name(&self) -> &str;

    /// Subscribes to a stream of events from this collector.
    async fn subscribe_event_stream(&mut self) -> AppResult<CollectorStream<'_, Event>>;

    /// Unsubscribe from the event stream of this collector
    async fn unsubscribe_event_stream(&mut self) -> AppResult<()>;
}

/// A trait that executes actions produced by the engine.
///
/// The [`Executor`] trait defines the interface for components responsible for
/// executing actions generated by the [`Engine`] after processing events. This
/// comonent represents the final step in the event processing pipeline.
pub trait Executor<Action>: Send + Sync {
    /// Get the unique identifier for the executor
    fn id(&self) -> &str;

    /// Execute a vector of actions.
    async fn execute_actions(&mut self, actions: Vec<Action>) -> AppResult<()>;
}

/// A high level orchestrator that connects the event collection, processing,
/// and execution components of the application.
///
/// The [`EngineRunner`] struct implements the event processing pipeline by:
///     1. Collecting events from multiple [`Collector`]
///     2. Passing these events to the [`Engine`] components for processing
///     3. Forwarding the resulting actions to the [`Executor`] for execution
#[allow(unused)]
pub struct EngineRunner<Event, Action> {
    name: String,
    collectors: Vec<Box<dyn Collector<Event>>>,
    engine: Vec<Box<dyn Engine<Event, Action>>>,
    event_channel_capacity: usize,
}

impl<Event, Action> EngineRunner<Event, Action> {
    /// Add an event collector to the engine runner.
    pub fn add_collector(&mut self, collector: Box<dyn Collector<Event>>) {
        self.collectors.push(collector);
    }

    /// Add engine to the engine runner.
    pub fn add_engine(&mut self, engine: Box<dyn Engine<Event, Action>>) {
        self.engine.push(engine);
    }
}
